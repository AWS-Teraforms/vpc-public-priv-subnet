AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation that Creates VPC with 3 public [bastion,LB1,LB2] Subnets and 
  2 private Subnets [ Appserver1,Appserver2].Also it contains Internetgateway and 2 NATGateways,
  Route Tables and Routes to Internet from both Public[IGW] and private Subnets[NATGW]
Parameters:
  VPCCIDR:
    Type: String
    Description: IP Address VPC
    MinLength: "9"
    MaxLength: "18"
    Default: 10.1.0.0/16
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  BastionPublicSNCIDR:
    Type: String
    Description: CIDR range for Bastion Subnet
    MinLength: "9"
    MaxLength: "18"
    Default: 10.1.0.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  LB01PublicSNCIDR:
    Type: String
    Description: CIDR range for Loadbalancer Subnet(LB01)
    MinLength: "9"
    MaxLength: "18"
    Default: 10.1.1.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  LB02PublicSNCIDR:
    Type: String
    Description: CIDR range for Loadbalancer Subnet(LB02)
    MinLength: "9"
    MaxLength: "18"
    Default: 10.1.2.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  AppSrv01PrivateSNCIDR:
    Type: String
    Description: CIDR range for Application Servers Subnet(AppSrv01)
    MinLength: "9"
    MaxLength: "18"
    Default: 10.1.10.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  AppSrv02PrivateSNCIDR:
    Type: String
    Description: CIDR range for Application Servers Subnet(AppSrv02)
    MinLength: "9"
    MaxLength: "18"
    Default: 10.1.20.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  DNSServersList:
    Type: String
    Description: List of DNS Ips Comma Delimited
    Default: 10.0.0.2,
Resources:
  #VPC##########################
  DemoVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      # dedicated | default | host
      InstanceTenancy: default
      Tags:
        - Key: stackName
          Value: !Sub "${AWS::StackName}"
        - Key: StackResourceName
          Value: !Sub "${AWS::StackName}-VPC"
  #DHCP Options
  VPCDHCPOptions:
    Type: "AWS::EC2::DHCPOptions"
    Properties:
      DomainName: demovpc.exmple.com
      DomainNameServers: !Split [",", !Ref DNSServersList]
      Tags:
        - Key: stackName
          Value: !Sub "${AWS::StackName}"
        - Key: StackResourceName
          Value: !Sub "${AWS::StackName}-VPC-DHCPOptions"
  VPCDHCPOptionAssociation:
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    Properties:
      DhcpOptionsId: !Ref VPCDHCPOptions
      VpcId: !Ref DemoVPC
  #Internet Gateway
  DemoInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: stackName
          Value: !Sub "${AWS::StackName}"
        - Key: StackResourceName
          Value: !Sub "${AWS::StackName}-VPC-InternetGateway"
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref DemoVPC
      InternetGatewayId: !Ref DemoInternetGateway
  #Subnets
  #Bastion Subnet
  BastionSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs ]
      CidrBlock: !Ref BastionPublicSNCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: stackName
          Value: !Sub "${AWS::StackName}"
        - Key: StackResourceName
          Value: !Sub "${AWS::StackName}-BastionSubnet"
      VpcId: !Ref DemoVPC
  #Loadbalancer Subnets LB01 and LB02
  LB01PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: !Ref LB01PublicSNCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: stackName
          Value: !Sub "${AWS::StackName}"
        - Key: StackResourceName
          Value: !Sub "${AWS::StackName}-LB01PublicSubnet"
      VpcId: !Ref DemoVPC
  LB02PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      CidrBlock: !Ref LB02PublicSNCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: stackName
          Value: !Sub "${AWS::StackName}"
        - Key: StackResourceName
          Value: !Sub "${AWS::StackName}-LB02PublicSubnet"
      VpcId: !Ref DemoVPC
  #Application Servers Subnets AppSrv01 and AppSrv02
  AppSrv01PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: !Ref AppSrv01PrivateSNCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: stackName
          Value: !Sub "${AWS::StackName}"
        - Key: StackResourceName
          Value: !Sub "${AWS::StackName}-AppSrv01PrivateSubnet"
      VpcId: !Ref DemoVPC
  AppSrv02PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ]
      CidrBlock: !Ref AppSrv02PrivateSNCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: stackName
          Value: !Sub "${AWS::StackName}"
        - Key: StackResourceName
          Value: !Sub "${AWS::StackName}-AppSrv02PrivateSubnet"
      VpcId: !Ref DemoVPC
  #NAT gateways for Private Subnets
  NATGateWay01:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt LB01PNATEIP.AllocationId
      SubnetId: !Ref LB01PublicSubnet
      Tags:
        - Key: stackName
          Value: !Sub "${AWS::StackName}"
        - Key: StackResourceName
          Value: !Sub "${AWS::StackName}-NATGateWay01"
  LB01PNATEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: stackName
          Value: !Sub "${AWS::StackName}"
        - Key: StackResourceName
          Value: !Sub "${AWS::StackName}-LB01PNATGW-EIP"
  NATGateWay02:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt LB02PNATEIP.AllocationId
      SubnetId: !Ref LB02PublicSubnet
      Tags:
        - Key: stackName
          Value: !Sub "${AWS::StackName}"
        - Key: StackResourceName
          Value: !Sub "${AWS::StackName}-NATGateWay02"
  LB02PNATEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: stackName
          Value: !Sub "${AWS::StackName}"
        - Key: StackResourceName
          Value: !Sub "${AWS::StackName}-LB02PNAT-EIP"
  #Bastion Route Table
  BastionPublicSNRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DemoVPC
      Tags:
        - Key: stackName
          Value: !Sub "${AWS::StackName}"
        - Key: StackResourceName
          Value: !Sub "${AWS::StackName}-BastionPublicSNRouteTable"
  #LB01 Route Table
  LB01PublicSNRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DemoVPC
      Tags:
        - Key: stackName
          Value: !Sub "${AWS::StackName}"
        - Key: StackResourceName
          Value: !Sub "${AWS::StackName}-LB01PublicSNRouteTable"
  #LB02 Route Table
  LB02PublicSNRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DemoVPC
      Tags:
        - Key: stackName
          Value: !Sub "${AWS::StackName}"
        - Key: StackResourceName
          Value: !Sub "${AWS::StackName}-LB02PublicSNRouteTable"
  #Appserver01 Route Table
  Appserver01PrivateSNRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DemoVPC
      Tags:
        - Key: stackName
          Value: !Sub "${AWS::StackName}"
        - Key: StackResourceName
          Value: !Sub "${AWS::StackName}-Appserver01PrivateSNRouteTable"
  #Appserver02 Route Table
  Appserver02PrivateSNRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref DemoVPC
      Tags:
        - Key: stackName
          Value: !Sub "${AWS::StackName}"
        - Key: StackResourceName
          Value: !Sub "${AWS::StackName}-Appserver02PrivateSNRouteTable"
  #Bastion Route To Internet through InternetGateway
  BastionSNIGWRoutingRuleA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref BastionPublicSNRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref DemoInternetGateway
  #LB01 Route To Internet through InternetGateway
  LB01PublicSNIGWRoutingRuleA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref LB01PublicSNRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref DemoInternetGateway
  #LB02 Route To Internet through InternetGateway
  LB02PublicSNIGWRoutingRuleA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref LB02PublicSNRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref DemoInternetGateway
  #Route To Internet through NATGateway for Appserver01Private Subent
  Appserver01PrivateSNNATWRoutingRuleA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Appserver01PrivateSNRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateWay01
  #Route To Internet through NATGateway for Appserver02Private Subent
  Appserver02PrivateSNNATWRoutingRuleA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Appserver02PrivateSNRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateWay02
  #Route table Assocaition , link between Subnets and Route Table
  BastionSNAssocationWithBastionRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref BastionPublicSNRouteTable
      SubnetId: !Ref BastionSubnet
  #Route table Assocaition , link between Subnets and Route Table
  LB01SNAssocationWithLB01PublicSNRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref LB01PublicSNRouteTable
      SubnetId: !Ref LB01PublicSubnet
  #Route table Assocaition , link between Subnets and Route Table
  LB02SNAssocationWithLB01PublicSNRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref LB02PublicSNRouteTable
      SubnetId: !Ref LB02PublicSubnet
  #Route table Assocaition , link between Subnets and Route Table
  LB02SNAssocationWithLB02PublicSNRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref LB02PublicSNRouteTable
      SubnetId: !Ref LB02PublicSubnet
  #Route table Assocaition , link between Subnets and Route Table
  Appserver01SNAssocationWithAppserver01PrivateSNRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Appserver01PrivateSNRouteTable
      SubnetId: !Ref AppSrv01PrivateSubnet
  #Route table Assocaition , link between Subnets and Route Table
  Appserver02SNAssocationWithAppserver01PrivateSNRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref Appserver02PrivateSNRouteTable
      SubnetId: !Ref AppSrv02PrivateSubnet
#######################################

